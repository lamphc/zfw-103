{"version":3,"sources":["utils/api/user.js","pages/Login/index.module.css","pages/Login/index.jsx"],"names":["login","data","request","post","getUserData","get","logout","checkFav","id","addFav","delFav","delete","getPubHouse","pubHouse","module","exports","Login","this","props","values","errors","touched","handleChange","handleSubmit","handleBlur","className","styles","root","mode","size","onSubmit","formItem","value","username","name","onChange","input","placeholder","error","password","type","formSubmit","submit","backHome","Item","to","Component","NewLogin","withFormik","mapPropsToValues","validationSchema","yup","shape","required","matches","a","status","description","console","log","success","location","backUrl","history","replace","setToken","token","fail"],"mappings":"2GAAA,4RAOO,SAASA,EAAOC,GACrB,OAAOC,IAAQC,KAAK,cAAeF,GAM9B,SAASG,IACd,OAAOF,IAAQG,IAAI,SAOd,SAASC,IACd,OAAOJ,IAAQC,KAAK,gBAOf,SAASI,EAAUC,GACxB,OAAON,IAAQG,IAAR,0BAA+BG,IAOjC,SAASC,EAAQD,GACtB,OAAON,IAAQC,KAAR,0BAAgCK,IAOlC,SAASE,EAAQF,GACtB,OAAON,IAAQS,OAAR,0BAAkCH,IAMpC,SAASI,IACd,OAAOV,IAAQG,IAAI,gBAOd,SAASQ,EAAUZ,GACxB,OAAOC,IAAQC,KAAK,eAAgBF,K,oBC7DtCa,EAAOC,QAAU,CAAC,KAAO,oBAAoB,UAAY,yBAAyB,SAAW,wBAAwB,SAAW,wBAAwB,MAAQ,qBAAqB,WAAa,0BAA0B,OAAS,sBAAsB,MAAQ,uB,qTCqB7PC,E,uKAwCK,MAUHC,KAAKC,MAPPC,EAHK,EAGLA,OAEAC,GALK,EAILC,QAJK,EAKLD,QACAE,EANK,EAMLA,aAGAC,GATK,EAOLC,WAPK,EASLD,cAIF,OACE,yBAAKE,UAAWC,IAAOC,MAGrB,uBAAQC,KAAK,SAAb,4BACA,uBAAYC,KAAK,OAGjB,2BACE,0BAAMC,SAAUP,GACd,yBAAKE,UAAWC,IAAOK,UACrB,2BACEC,MAAOb,EAAOc,SACdC,KAAK,WACLC,SAAUb,EACVG,UAAWC,IAAOU,MAClBC,YAAY,oCAIfjB,EAAOa,UACN,yBAAKR,UAAWC,IAAOY,OAAQlB,EAAOa,UAExC,yBAAKR,UAAWC,IAAOK,UACrB,2BACEC,MAAOb,EAAOoB,SACdL,KAAK,WACLC,SAAUb,EACVG,UAAWC,IAAOU,MAClBI,KAAK,WACLH,YAAY,oCAIfjB,EAAOmB,UACN,yBAAKd,UAAWC,IAAOY,OAAQlB,EAAOmB,UAExC,yBAAKd,UAAWC,IAAOe,YACrB,4BAAQhB,UAAWC,IAAOgB,OAAQF,KAAK,UAAvC,mBAKJ,uBAAMf,UAAWC,IAAOiB,UACtB,sBAAMC,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,mE,GAlGMC,aA2GdC,EAAWC,YAAW,CAG1BC,iBAAkB,iBAAO,CAAEhB,SAAU,QAASM,SAAU,UAgBxDW,iBAAkBC,MAAaC,MAAM,CACnCnB,SAAUkB,MAEPE,SAAS,8CACTC,QA3IW,qBA2IQ,wHACtBf,SAAUY,MAEPE,SAAS,8CACTC,QA9IS,sBA8IQ,2HAGtB/B,aAAa,WAAD,4BAAE,WAAOJ,EAAP,8BAAAoC,EAAA,6DAAiBrC,EAAjB,EAAiBA,MAOrBe,EAAuBd,EAAvBc,SAAUM,EAAapB,EAAboB,SAPN,SASgCvC,YAAM,CAAEiC,WAAUM,aATlD,gBASJiB,EATI,EASJA,OAAQvD,EATJ,EASIA,KAAMwD,EATV,EASUA,YAEP,MAAXD,GACFE,QAAQC,S,GACR,IAAMC,QAAQH,EAAa,GAAG,WAGxBvC,EAAM2C,SAASC,QACjB5C,EAAM6C,QAAQC,QAAQ9C,EAAM2C,SAASC,SAGrC5C,EAAM6C,QAAQC,QAAQ,oBAI1BC,YAAShE,EAAKiE,QAEd,IAAMC,KAAKV,GA1BD,2CAAF,qDAAC,IA9BET,CA2DdhC,GAEY+B","file":"static/js/16.1aaa7527.chunk.js","sourcesContent":["import request from '../request'\n\n\n/**\n * 用户 =》后台接口\n */\n\nexport function login (data) {\n  return request.post('/user/login', data)\n}\n\n/**\n * 获取当前登录人信息\n */\nexport function getUserData () {\n  return request.get('/user')\n}\n\n\n/**\n * 退出登录\n */\nexport function logout () {\n  return request.post('/user/logout')\n}\n\n/**\n * 查询房源是否收藏过\n * @param {*} id 房源ID\n */\nexport function checkFav (id) {\n  return request.get(`/user/favorites/${id}`)\n}\n\n/**\n * 添加收藏\n * @param {*} id 房源ID\n */\nexport function addFav (id) {\n  return request.post(`/user/favorites/${id}`)\n}\n\n/**\n * 删除收藏\n * @param {*} id 房源ID\n */\nexport function delFav (id) {\n  return request.delete(`/user/favorites/${id}`)\n}\n\n/**\n * 获取已发布房源列表数据\n */\nexport function getPubHouse () {\n  return request.get('/user/houses')\n}\n\n/**\n * 发布房源\n * @param {*} data 房源数据\n */\nexport function pubHouse (data) {\n  return request.post('/user/houses', data)\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"root\":\"Login_root__xpMLV\",\"navHeader\":\"Login_navHeader__15hA9\",\"backHome\":\"Login_backHome__uoXiv\",\"formItem\":\"Login_formItem__2h67j\",\"input\":\"Login_input__2pNlW\",\"formSubmit\":\"Login_formSubmit__13nn8\",\"submit\":\"Login_submit__3Xx64\",\"error\":\"Login_error__WN4FS\"};","import React, { Component } from 'react'\r\nimport { Flex, WingBlank, WhiteSpace, NavBar, Toast } from 'antd-mobile'\r\n\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport styles from './index.module.css'\r\nimport { login } from '../../utils/api/user'\r\nimport { setToken } from '../../utils'\r\n\r\nimport { withFormik } from 'formik'\r\nimport * as yup from 'yup'\r\n\r\n// 验证规则：\r\nconst REG_UNAME = /^[a-zA-Z_\\d]{5,8}$/\r\nconst REG_PWD = /^[a-zA-Z_\\d]{5,12}$/\r\n\r\n/**\r\n * 表单处理\r\n * 受控组件=》双向绑定 =》获取表单数据\r\n * 受控组件：把表单元素的值交给组件状态管理=》1. 表单元素的value绑定状态数据 2. 绑定onChange事件\r\n */\r\n\r\nclass Login extends Component {\r\n  // 设置响应数据\r\n  // state = {\r\n  //   // 用户名\r\n  //   username: '',\r\n  //   // 密码\r\n  //   password: '',\r\n  // }\r\n\r\n  // 处理双向绑定\r\n  // handlerInput = (e) => {\r\n  //   // console.log(e.target)\r\n  //   this.setState({\r\n  //     // key:val\r\n  //     // [变量]:val\r\n  //     [e.target.name]: e.target.value,\r\n  //   })\r\n  // }\r\n\r\n  // 登录\r\n  // login = async (e) => {\r\n  //   // 阻止表单默认行为\r\n  //   e.preventDefault()\r\n  //   // 获取用户输入的用户名和密码\r\n  //   const { username, password } = this.state\r\n  //   // console.log(e, username, password)\r\n  //   const { status, data, description } = await login({ username, password })\r\n  //   // console.log(status, data)\r\n  //   if (status === 200) {\r\n  //     Toast.success(description, 1, () => {\r\n  //       // 跳转路由=》我的\r\n  //       this.props.history.push('/home/profile')\r\n  //     })\r\n  //     // 把token存储到本地\r\n  //     setLocalData(HZW_TOKEN, data.token)\r\n  //   } else {\r\n  //     Toast.fail(description)\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    // 高阶组件传递的数据\r\n    const {\r\n      values, // 表单输入域的值\r\n      touched,\r\n      errors,\r\n      handleChange, // 处理双向绑定（受控组件）\r\n      handleBlur,\r\n      // 处理表单提交\r\n      handleSubmit,\r\n    } = this.props\r\n    // console.log(this.props)\r\n    // console.log(errors)\r\n    return (\r\n      <div className={styles.root}>\r\n        {/* <h1>{errors.username}</h1> */}\r\n        {/* 顶部导航 */}\r\n        <NavBar mode=\"light\">账号登录</NavBar>\r\n        <WhiteSpace size=\"xl\" />\r\n\r\n        {/* 登录表单 */}\r\n        <WingBlank>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className={styles.formItem}>\r\n              <input\r\n                value={values.username}\r\n                name=\"username\"\r\n                onChange={handleChange}\r\n                className={styles.input}\r\n                placeholder=\"请输入账号\"\r\n              />\r\n            </div>\r\n            {/* 长度为5到8位，只能出现数字、字母、下划线 */}\r\n            {errors.username && (\r\n              <div className={styles.error}>{errors.username}</div>\r\n            )}\r\n            <div className={styles.formItem}>\r\n              <input\r\n                value={values.password}\r\n                name=\"password\"\r\n                onChange={handleChange}\r\n                className={styles.input}\r\n                type=\"password\"\r\n                placeholder=\"请输入密码\"\r\n              />\r\n            </div>\r\n            {/* 长度为5到12位，只能出现数字、字母、下划线 */}\r\n            {errors.password && (\r\n              <div className={styles.error}>{errors.password}</div>\r\n            )}\r\n            <div className={styles.formSubmit}>\r\n              <button className={styles.submit} type=\"submit\">\r\n                登 录\r\n              </button>\r\n            </div>\r\n          </form>\r\n          <Flex className={styles.backHome}>\r\n            <Flex.Item>\r\n              <Link to=\"/registe\">还没有账号，去注册~</Link>\r\n            </Flex.Item>\r\n          </Flex>\r\n        </WingBlank>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst NewLogin = withFormik({\r\n  // 设置表单响应数据 => 等价于=》类组件中定义state数据\r\n  // 注意：表单元素的name值要和values保持一致 ==== username: 'test2', password: 'test2'\r\n  mapPropsToValues: () => ({ username: 'test2', password: 'test2' }),\r\n\r\n  // Custom sync validation\r\n  // 验证表单输入框的值：\r\n  // 1. 手动\r\n  // validate: (values) => {\r\n  //   console.log(values)\r\n  //   const errors = {}\r\n\r\n  //   if (!values.username) {\r\n  //     errors.username = '不能为空！'\r\n  //   }\r\n\r\n  //   return errors\r\n  // },\r\n  // 2. 配置 => 基于yup的schema对象\r\n  validationSchema: yup.object().shape({\r\n    username: yup\r\n      .string()\r\n      .required('账号不能为空！')\r\n      .matches(REG_UNAME, '长度为5到8位，只能出现数字、字母、下划线'),\r\n    password: yup\r\n      .string()\r\n      .required('密码不能为空！')\r\n      .matches(REG_PWD, '长度为5到12位，只能出现数字、字母、下划线'),\r\n  }),\r\n  // 表单提交事件\r\n  handleSubmit: async (values, { props }) => {\r\n    // console.log(formikBag)\r\n    // 获取表单输入的值\r\n    // console.log(values)\r\n    // // 阻止表单默认行为\r\n    // e.preventDefault()\r\n    // 获取用户输入的用户名和密码\r\n    const { username, password } = values\r\n    // console.log(e, username, password)\r\n    const { status, data, description } = await login({ username, password })\r\n    // console.log(status, data)\r\n    if (status === 200) {\r\n      console.log(this)\r\n      Toast.success(description, 1, () => {\r\n        // 跳转路由=》我的 =>获取不到Login组件的this\r\n        // 如果存在backUrl=》跳转到backUrl的页面\r\n        if (props.location.backUrl) {\r\n          props.history.replace(props.location.backUrl)\r\n        } else {\r\n          // 默认跳回个人中心\r\n          props.history.replace('/home/profile')\r\n        }\r\n      })\r\n      // 把token存储到本地\r\n      setToken(data.token)\r\n    } else {\r\n      Toast.fail(description)\r\n    }\r\n  },\r\n})(Login)\r\n// 导出被高阶组件withFormik增强后的组件=》渲染\r\nexport default NewLogin\r\n"],"sourceRoot":""}