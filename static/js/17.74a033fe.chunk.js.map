{"version":3,"sources":["pages/Hook/index.jsx"],"names":["MyContext","React","createContext","useCounter","useState","count","setCount","useEffect","id","setInterval","c","clearInterval","Child","shareCount","useContext","style","color","Consumer","val","List","name","list","setList","ulRef","useRef","console","log","ref","map","item","key","onClick","length","Math","random","toString","Demo","useDrop","onFiles","files","onUri","uri","onText","text","className","width","height","Demo2","target","setTarget","value","useSpring","Hook","setName","a","b","obj","setObj","fetch","res","fetchData","Provider","oldObj","_oldObj","ct"],"mappings":"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","file":"static/js/17.74a033fe.chunk.js","sourcesContent":["import React, { useState, useEffect, useContext, useRef } from 'react'\n// 第三方的hook钩子函数\nimport { useDrop } from 'react-use'\nimport useSpring from 'react-use/lib/useSpring'\n\nimport './index.scss'\n\n/**\n * 跨多级组件通信（共享数据）\n * Context对象\n * 1. 创建Context对象：React.createContext()\n * 2. 使用Context对象的Provider组件提供数据=>value\n * 3. 使用Context对象的Consumer组件获取数据\n */\nconst MyContext = React.createContext()\n\n/**\n * react-hook：使函数组件具有和class组件基本一样的功能=》比如：state(响应式)\n * hook:钩子=》帮函数组件勾出来类组件的一些能力=》语法：useXXX()\n * 使用规则：\n * 1. 只能定义到函数体的第一层\n * 2. 不能在类组件中使用hook\n */\n\n// 约定：函数的名字以 use 开头，并且调用了其他的 Hook，则就称其为一个自定义 Hook\n// 数据共享=》状态复用=>替代render-props和hoc（数据和UI的分离）\nconst useCounter = () => {\n  const [count, setCount] = useState(0)\n  // componetDidMount\n  useEffect(() => {\n    let id = setInterval(() => {\n      setCount((c) => c + 1)\n    }, 1000)\n    // 卸载时清除定时器\n    return () => clearInterval(id)\n  }, [])\n  return [count, setCount]\n}\n\nconst Child = () => {\n  // 使用hook获取context对象共享的数据\n  const shareCount = useContext(MyContext)\n  // console.log(shareCount)\n\n  // 使用自定义hook\n  const [count] = useCounter()\n  return (\n    <div>\n      <h3>孙子组件</h3>\n      <p style={{ color: 'red' }}>{count}</p>\n      <MyContext.Consumer>{(val) => <p>{val}</p>}</MyContext.Consumer>\n      <h4>{shareCount}</h4>\n    </div>\n  )\n}\n\nconst List = () => {\n  // 定义响应数据：数组\n  const [list, setList] = useState([{ id: 0, name: '小红' }])\n\n  // 使用useRef\n  let ulRef = useRef()\n  console.log(ulRef)\n\n  // 使用自定义hook\n  const [count, setCount] = useCounter()\n\n  return (\n    <div>\n      <h1 style={{ color: 'blue' }}>{count}</h1>\n      <ul ref={ulRef}>\n        {list.map((item) => (\n          <li key={item.id}>{item.name}</li>\n        ))}\n      </ul>\n      <button\n        onClick={() => {\n          setList((list) => {\n            let _list = [\n              { id: list.length + 1, name: (Math.random() * 10).toString(16) },\n              ...list,\n            ]\n            return _list\n          })\n        }}>\n        add\n      </button>\n    </div>\n  )\n}\n\n// 第三方钩子hook\nconst Demo = () => {\n  // 拖拽上传\n  const state = useDrop({\n    onFiles: (files) => console.log('files', files),\n    onUri: (uri) => console.log('uri', uri),\n    onText: (text) => console.log('text', text),\n  })\n\n  return (\n    <div className=\"bg\" style={{ width: '100%', height: '300px' }}>\n      Drop something on the page.\n    </div>\n  )\n}\n\nconst Demo2 = () => {\n  const [target, setTarget] = useState(50)\n  const value = useSpring(target)\n\n  return (\n    <div>\n      {value}\n      <br />\n      <button onClick={() => setTarget(0)}>Set 0</button>\n      <button onClick={() => setTarget(100)}>Set 100</button>\n    </div>\n  )\n}\n\nexport default function Hook() {\n  // 逻辑\n  // 使用useState钩子实现响应式\n  /**\n   * useState(value)=>设置响应数据\n   * 返回一个数组：\n   * 1.数组第一项=》响应数据\n   * 2.数组的第二项=》修改响应数据并刷新视图\n   */\n  const [count, setCount] = useState(0)\n  // 定义一个string\n  const [name, setName] = useState('小红')\n  // 定义obj\n  const [obj, setObj] = useState({ a: 1, b: 'str' })\n  // 只能定义到函数体的第一层\n  // if (count) {\n  //   const [count2, setCount2] = useState(0)\n  // }\n  // console.log(count[0], count[1])\n\n  // 当作：componentDidMount\n  useEffect(() => {\n    // 调用接口\n    const fetchData = async () => {\n      let res = await fetch('http://api-haoke-dev.itheima.net/home/swiper')\n      console.log(res)\n    }\n    fetchData()\n    console.log('组件挂载了！')\n    // 当作：componentWillUnmount\n    return () => console.log('组件卸载了！')\n  }, [])\n\n  // 当作生命周期钩子函数使用=》'相当于：`componentDidMount`、`componentDidUpdate` 和 `componentWillUnmount` '\n  // 当作：componentDidUpdate\n  useEffect(() => {\n    console.log('go1')\n  }, [name, obj])\n\n  useEffect(() => {\n    console.log('go2')\n  }, [count])\n\n  // 模版\n  return (\n    <MyContext.Provider value={count}>\n      <h1>react-hook使用</h1>\n      <hr />\n      <Demo />\n      <Demo2 />\n      <hr />\n      <p>{count}</p>\n      <p>{name}</p>\n      <p>\n        {obj.a},{obj.b}\n      </p>\n      <button\n        onClick={() => {\n          setObj((oldObj) => {\n            // 修改数据：创建一个新对象，拷贝老的状态数据\n            const _oldObj = { ...oldObj }\n            _oldObj.a = Math.random() * 1000\n            _oldObj.b = (Math.random() * 200).toString(16)\n            // 返回\b值：最新obj数据\n            return _oldObj\n          })\n        }}>\n        修改obj\n      </button>\n      <button\n        onClick={() => {\n          // setName((Math.random() * 100).toString(16))\n          setName('伟伟同学')\n        }}>\n        修改name\n      </button>\n      <button\n        onClick={() => {\n          setCount(count + 1)\n        }}>\n        修改count1\n      </button>\n      <button\n        onClick={() => {\n          setCount((ct) => {\n            return ct + 1\n          })\n        }}>\n        修改count2\n      </button>\n      <hr />\n      <List />\n      <hr />\n      <Child />\n    </MyContext.Provider>\n  )\n}\n"],"sourceRoot":""}